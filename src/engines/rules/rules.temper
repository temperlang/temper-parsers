
let {...} = import("../../common/rules");
let {...} = import("../../common/tree");
let {...} = import("../../regex/nfa");
let {...} = import("../engine");

var noRules = new ListBuilder<Rule>();
var noRulePart = new RulePart(true, "");

var idString(s: String): String {
  return s;
}

class Result {
  public stop: Int;
  public trees: Listed<Tree>;
}

export class RulesRec extends Engine {
  private start: String;
  private rules: Rules;
  private nfa: NFA;
  private results: MapBuilder<Int, Result>;
  private numIds: Int;
  private max: Int;

  private noParse: Tree;
  private noKeyFound: Tree;
  private noResult: Result;
  private noResultFound: Result;

  private noRule: Rule;

  public constructor(s: String, r: Rules, n: NFA): Void {
    start = s;
    rules = r;
    nfa = n;
    results = new MapBuilder<Int, Result>();
    numIds = rules.rules.length;

    noParse = new Error("NoParse");
    noKeyFound = new Error("NoKey");
    noResult = new Result(-1, [noParse]);
    noResultFound = new Result(-1, [noKeyFound]);
  }

  private checkAlways(n: Int, str: Listed<String>, rule: Rule): Result {
    if (rule.lex) {
      var got = nfa.runFromName(rule.name, str, n);
      if (got > n) {
        var t: Tree = new TokenSlice(str, n, got);
        return new Result(got, [t]);
      }
      return noResult;
    } else {
      var ls = new ListBuilder<Tree>();
      var head = n;
      var len = rule.parts.length;
      for (var i = 0; i < len; i++) {
        var part = rule.parts.getOr(i, noRulePart);
        var got = name(head, str, part.data);
        head = got.stop;
        if (head < n) {
          return noResult;
        }
        ls.addAll(got.trees);
      }
      if (rule.mode == "%expand") {
        return new Result(head, ls);
      } else if (rule.mode == "%ignore") {
        return new Result(head, []);
      } else {
        var t: Tree = new Node(rule.mode, ls);
        return new Result(head, [t]);
      }
    }
  }

  private check(n: Int, str: Listed<String>, rule: Rule): Result {
    var hash = n * numIds + rule.id;
    var got = results.getOr(hash, noResultFound);
    if (got != noResultFound) {
      return got;
    }
    // results[hash] = noResult;
    var ret = checkAlways(n, str, rule);
    results[hash] = ret;
    return ret;
  }

  private checks(n: Int, str: Listed<String>, rules: Listed<Rule>): Result {
    var best = noResult;
    for (var i = 0; i < rules.length; i++) {
      var got = check(n, str, rules[i]);
      if (got.stop >= best.stop) {
        best = got;
      }
    }
    return best;
  }

  private name(n: Int, str: Listed<String>, name: String): Result {
    var got = checks(n, str, rules.byName.getOr(name, noRules));
    var stop = got.stop;
    if (stop < n) {
      return got;
    }
    if (stop > max) {
      max = stop;
    }
    return got;
  }

  public trees(src: String): Listed<Tree> {
    max = -1;
    var split = src.split("");
    var ret = name(0, split, start);
    if (ret.stop != split.length) {
      console.log("${max.toString()} / ${split.length.toString()}");
      return [];
    }
    return ret.trees;
  }
}
