
let {...} = import("../../regex/nfa");
let {...} = import("./result");

export class Cache {
  public var head: Int;
  public chars: Listed<String>;
  public nfa: NFA;
  public rules: MapBuilder<String, Normal>;
  public max: Int;
  public results: MapBuilder<Int, Result> = new MapBuilder<Int, Result>();
  public var best: Int = -1;
  public cache: MapBuilder<Int, Result> = new MapBuilder<Int, Result>();
}

export interface Normal {
  public id: Int;

  public check(cache: Cache): Result;

  public toString(): String;
}

export class NormalOr extends Normal {
  public id: Int;
  public v1: Normal;
  public v2: Normal;
  
  public check(cache: Cache): Result {
    var init = cache.head;
    var r1 = v1.check(cache);
    var mid = cache.head;
    cache.head = init;
    var r2 = v2.check(cache);
    if (r1.stop >= r2.stop) {
      cache.head = mid;
      return r1;
    } else {
      return r2;
    }
  }

  public toString(): String {
    return "#${id.toString()} = #${v1.id.toString()} | #${v2.id.toString()}";
  }
}

export class NormalAnd extends Normal {
  public id: Int;
  public v1: Normal;
  public v2: Normal;
  
  public check(cache: Cache): Result {
    var pos = cache.head;
    var r1 = v1.check(cache);
    if (r1.stop < 0) {
      cache.head = pos;
      return r1;
    }
    var r2 = v2.check(cache);
    return new ResultCons(r2.stop, r1, r2);
  }

  public toString(): String {
    return "#${id.toString()} = #${v1.id.toString()} & #${v2.id.toString()}";
  }
}

export class NormalEmpty extends Normal {
  public id: Int;

  public check(cache: Cache): Result {
    return new ResultEmpty(cache.head);
  }

  public toString(): String {
    return "#${id.toString()} = <empty>";
  }
}

export class NormalNode extends Normal {
  public id: Int;
  public name: String;
  public next: Normal;

  public check(cache: Cache): Result {
    var got = next.check(cache);
    return new ResultNode(got.stop, name, got);
  }

  public toString(): String {
    return "alias #${id.toString()} = #${id.toString()}";
  }
}

export class NormalIgnore extends Normal {
  public id: Int;
  public next: Normal;

  public check(cache: Cache): Result {
    var got = next.check(cache);
    return new ResultIgnore(got.stop);
  }

  public toString(): String {
    return "alias #${id.toString()} = #${next.id.toString()}";
  }
}

export class NormalToken extends Normal {
  public id: Int;
  public next: Normal;

  public check(cache: Cache): Result {
    var start = cache.head;
    var got = next.check(cache);
    if (got.stop <= start) {
      return notChar;
    } else {
      return new ResultToken(got.stop, start);
    }
  }

  public toString(): String {
    return "alias #${id.toString()} = #${next.id.toString()}";
  }
}

export class NormalCharSet extends Normal {
  public id: Int;
  public str: String;
  public vec: MapBuilder<String, Boolean>;

  public constructor(i: Int, s: String) {
    id = i;
    str = s;
    vec = new DenseBitVector(128);
    var split = str.split("");
    for (var i = 0; i < split.length; i++) {
      vec[split[i]] = true;
    }
  }

  public check(cache: Cache): Result {
    var head = cache.head;
    if (vec.getOr(cache.chars.getOr(head, ""), false)) {
      var stop = head + 1;
      if (stop > cache.best) {
        cache.best = stop;
      }
      cache.head = stop;
      return new ResultToken(stop, head);
    } else {
      return notChar;
    }
  }

  public toString(): String {
    return "#${id.toString()} = <char-set>";
  }
}

var notChar = new ResultError(-1, "not-done");
var notDone = new ResultError(-1, "not-done");
var notHere = new ResultError(-1, "not-here");

export class NormalLink extends Normal {
  public id: Int;
  public name: String;

  public check(cache: Cache): Result {
    var hash = id * cache.chars.length + cache.head;
    var cached = cache.cache.getOr(hash, notHere);
    if (cached != notHere) {
      cache.head = cached.stop;
      return cached;
    }
    var got = cache.rules.getOr(name, noNormal).check(cache);
    cache.cache[hash] = got;
    return got;
  }

  public toString(): String {
    return "#${id.toString()} = ${name}";
  }
}

export var noNormal = new NormalEmpty(-1);
export var noRecursive = new NormalEmpty(-1);
