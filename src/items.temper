
let {...} = import("./tree");

export interface ItemPart {
  public isTest(): Boolean;
  public name(): String;
  public check(c: Int): Boolean;
  public toString(): String;
}

export class ItemPartItem extends ItemPart {
  public rule: String;
  
  public isTest(): Boolean {
    return false;
  }

  public name(): String {
    return rule;
  }

  public check(c: Int): Boolean {
    return false;
  }

  public toString(): String {
    return rule;
  }
}

export class ItemPartSet extends ItemPart {
  public vals: List<String>;
  private bits: DenseBitVector;

  public constructor(args: List<String>): Void {
    vals = args;
    bits = new DenseBitVector(128);
    for (var i = 0; i < args.length; i++) {
      bits[args[i].codePoints.read()] = true;
    }
  }
  
  public isTest(): Boolean {
    return true;
  }

  public name(): String {
    return "FAKE ${vals.join(" | ") { (s);; s }}";
  }

  public check(c: Int): Boolean {
    return bits[c];
  }

  public toString(): String {
    var joined = vals.join("|") { (s);; s };
    return "/${joined}/";
  }
}

var noTrees: List<Tree> = [];

export interface Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;

  public addTreesTo(b: ListBuilder<Tree>): Void;

  public toTree(cons: Listed<fn(Listed<Tree>): Listed<Tree>>): Listed<Tree>;
 
  public advanceWithSingle(got: Tree): Item {
    var self = this;
    return new TreeItem(self.name, self.ents, self.dot + 1, self.start, self.id, self, got);
  }

  public advanceWith(got: Listed<Tree>): Item {
    var self = this;
    return new ListItem(self.name, self.ents, self.dot + 1, self.start, self.id, self, got);
  }

  public advance(): Item {
    var self = this;
    return new EmptyItem(self.name, self.ents, self.dot + 1, self.start, self.id, self);
  }
} 

export class FirstItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;

  public addTreesTo(b: ListBuilder<Tree>): Void {}
  
  public toTree(cons: Listed<fn(Listed<Tree>): Listed<Tree>>): Listed<Tree> {
    return cons[id](noTrees);
  }
}

export class EmptyItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  private last: Item;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    last.addTreesTo(b);
  }
  
  public toTree(cons: Listed<fn(Listed<Tree>): Listed<Tree>>): Listed<Tree> {
    return last.toTree(cons);
  }
}

export class ListItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  private last: Item;
  private trees: Listed<Tree>;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    last.addTreesTo(b);
    b.addAll(trees);
  }

  public toTree(cons: Listed<fn(Listed<Tree>): Listed<Tree>>): Listed<Tree> {
    var b = new ListBuilder<Tree>();
    addTreesTo(b);
    return cons[id](b);
  }
}

export class TreeItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  private last: Item;
  private tree: Tree;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    last.addTreesTo(b);
    b.add(tree);
  }

  public toTree(cons: Listed<fn(Listed<Tree>): Listed<Tree>>): Listed<Tree> {
    var b = new ListBuilder<Tree>();
    addTreesTo(b);
    return cons[id](b);
  }
}
