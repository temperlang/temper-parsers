
let {...} = import("./tree");

export interface ItemPart {
  public isTest(): Boolean;
  public name(): String;
  public check(c: Int): Boolean;
  public toString(): String;
}

export class ItemPartItem extends ItemPart {
  public rule: String;
  
  public isTest(): Boolean {
    return false;
  }

  public name(): String {
    return rule;
  }

  public check(c: Int): Boolean {
    return false;
  }

  public toString(): String {
    return rule;
  }
}

export class ItemPartSet extends ItemPart {
  public vals: List<String>;
  private bits: DenseBitVector;

  public constructor(args: List<String>): Void {
    vals = args;
    bits = new DenseBitVector(128);
    for (var i = 0; i < args.length; i++) {
      bits[args[i][String.begin]] = true;
    }
  }
  
  public isTest(): Boolean {
    return true;
  }

  public name(): String {
    return "FAKE ${vals.join(" | ") { (s);; s }}";
  }

  public check(c: Int): Boolean {
    return bits[c];
  }

  public toString(): String {
    var joined = vals.join("") { (s);; s };
    return "[${joined}]";
  }
}

var noTrees: List<Tree> = [];
var noEnts: List<ItemPart> = [];

let walk(trees: Listed<Tree>): String {
  return trees.join("", fn(t: Tree): String {
    when (t) {
      is Token -> return t.value;
      is Node -> return walk(t.items);
      else -> bubble();
    }
  });
}

export interface Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;

  public addTreesTo(b: ListBuilder<Tree>): Void;

  public toString(): String {
    var self = this;
    var parts = self.ents;
    var strs = new ListBuilder<String>();
    for (var i = 0; i < parts.length; i++) {
      if (i == self.dot) {
        strs.add(".");
      }
      strs.add(self.ents[i].toString());
    }
    if (parts.length == self.dot) {
      strs.add(".");
    }
    var str = strs.join(" ") {(s);; s};
    return "${self.name}: ${str} (${self.start.toString()})";
  }

  public toTree(): Listed<Tree> {
    var self = this;
    var mode = self.mode;
    var b = new ListBuilder<Tree>();
    addTreesTo(b);
    if (mode == "%ignore") {
      return noTrees;
    } else if (mode == "%expand") {
      return b;
    } else if (mode == "%token") {
      var t: Tree = new TokenString(walk(b));
      return [t];
    } else {
      var t: Tree = new Node(mode, b);
      return [t];
    }
  }

  public asOnlyWith(tree: Tree): Item {
    var self = this;
    return new OnlyItem(self.name, self.ents, self.ents.length, self.start, self.id, self.mode, tree);
  }
 
  public advanceWithChar(got: String): Item {
    var self = this;
    return new StringItem(self.name, self.ents, self.dot + 1, self.start, self.id, self.mode, self, got);
  }
 
  public advanceWithString(len: Int, got: String): Item {
    var self = this;
    return new StringItem(self.name, self.ents, self.dot + len, self.start, self.id, self.mode, self, got);
  }

  public advanceWithItem(got: Item): Item {
    var self = this;
    return new ItemItem(self.name, self.ents, self.dot + 1, self.start, self.id, self.mode, self, got);
  }

  public advance(): Item {
    var self = this;
    return new EmptyItem(self.name, self.ents, self.dot + 1, self.start, self.id, self.mode, self);
  }
} 

export class FirstItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;

  public addTreesTo(b: ListBuilder<Tree>): Void {}
}

class EmptyItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;
  private last: Item;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    last.addTreesTo(b);
  }
}

class ItemItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;
  private last: Item;
  private item: Item;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    var mode = item.mode;
    if (mode == "%ignore") {
      last.addTreesTo(b);
    } else {
      var ret = last.addTreesTo(b);
      if (mode == "%expand") {
        item.addTreesTo(b);
      } else if (mode == "%token") {
        var bb = new ListBuilder<Tree>();
        item.addTreesTo(bb);
        b.add(new TokenString(walk(bb)));
      } else {
        var bb = new ListBuilder<Tree>();
        item.addTreesTo(bb);
        var t: Tree = new Node(mode, bb);
        b.add(t);
      }
    }
  }
}

class StringItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;
  private last: Item;
  private str: String;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    last.addTreesTo(b);
    b.add(new TokenString(str));
  }
}


class OnlyItem extends Item {
  public name: String;
  public ents: List<ItemPart>;
  public dot: Int;
  public start: Int;
  public id: Int;
  public mode: String;
  private tree: Tree;

  public addTreesTo(b: ListBuilder<Tree>): Void {
    b.add(tree);
  }
}
