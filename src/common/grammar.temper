
let {...} = import("./tree");
let {...} = import("./rules");
let {...} = import("../larkish/ascii");
let {...} = import("./items");
let {...} = import("../engines/earley");
let {...} = import("../engines/lexer");

var right = [true, true];

export let toGrammar(whole: Tree): Grammar {
  var grammar = new Grammar();

  var base = "";
  var term: Boolean = false;
  var n = 0;
  let genName(): String {
    n += 1;
    return "${base}#${n.toString()}";
  }

  var names = new MapBuilder<String, String>();
  let translateNode(node: Node): String  {
    if (node.type == "Grammar") {
      node.forEach { (tree);;
        translate(tree);
      };
      return "";
    }
    if (node.type == "AliasDefine") {
      var alias = node.items[2].as<Token>().value;
      base = node.items[0].as<Token>().value;
      term = base.codePoints.read() <= "Z".codePoints.read();
      var item = translate(node.items[1]);
      if (term) {
        console.log("unhandled: alias of token ${node.toString()}");
        bubble();
      } else {
        grammar.name(base).seq().rule(item).alias(alias);
      }
      return "";
    }
    if (node.type == "Define") {
      var name = node.items[0].as<Node>();
      base = name.items[0].as<Token>().value;
      var expand = name.type == "ExpandName";
      term = base.codePoints.read() <= "Z".codePoints.read();
      var item = translate(node.items[1]);
      if (term) {
        grammar.name(base).seq().rule(item).token().mayLex();
      } else {
        grammar.name(base).seq().rule(item);
        if (expand) {
          grammar.expand();
        }
      }
      return "";
    }
    if (node.type == "Rule") {
      return node.items[0].as<Token>().value;
    }
    if (node.type == "Select") {
      var name = genName();
      var names = new ListBuilder<String>();
      node.forEach { (tree);;
        names.add(translate(tree));
      };
      grammar.name(name);
      for (var i = 0; i < names.length; i++) {
        grammar.seq().rule(names[i]).expand();
      }
      return name;
    }
    if (node.type == "Sequence") {
      var name = genName();
      var names = new ListBuilder<String>();
      node.forEach { (tree);;
        names.add(translate(tree));
      };
      grammar.name(name).seq();
      for (var i = 0; i < names.length; i++) {
        if (i != 0) {
          if (!term) {
            grammar.rule("__ignores__");
          }
        }
        grammar.rule(names[i]);
      }
      grammar.expand();
      return name;
    }
    if (node.type == "OneOrMore") {
      var name = genName();
      var item = translate(node.items[0]);
      grammar.name(name);
      if (right[1]) {
        if (!term) {
          grammar.seq().rule(item).rule("__ignores__").rule(name).expand();
        } else {
          grammar.seq().rule(item).rule(name).expand();
        }
      } else {
        if (!term) {
          grammar.seq().rule(name).rule("__ignores__").rule(item).expand();
        } else {
          grammar.seq().rule(name).rule(item).expand();
        }
      }
      grammar.seq().rule(item).expand();
      return name;
    }
    if (node.type == "ZeroOrMore") {
      var name = genName();
      var item = translate(node.items[0]);
      grammar.name(name);
      if (right[0]) {
        if (!term) {
          grammar.seq().rule(item).rule("__ignores__").rule(name).expand();
        } else {
          grammar.seq().rule(item).rule(name).expand();
        }
      } else {
        if (!term) {
          grammar.seq().rule(name).rule("__ignores__").rule(item).expand();
        } else {
          grammar.seq().rule(name).rule(item).expand();
        }
      }
      grammar.seq().expand();
      return name;
    }
    if (node.type == "ZeroOrOne") {
      var name = genName();
      var item = translate(node.items[0]);
      grammar.name(name);
      grammar.seq().rule(item).expand();
      grammar.seq().expand();
      return name;
    }
    if (node.type == "CharSet") {
      var name = genName();
      grammar.name(name).seq().char(node.items[0].as<Token>().value).expand();
      if (!term) {
        grammar.mayLex();
      }
      return name;
    }
    if (node.type == "String") {
      var str = node.items[0].as<Token>().value;
      names[str] orelse do {
        var inner = genName();
        grammar.name(inner).seq().str(str).token();
        if (!term) {
          grammar.mayLex();
        }
        names[str] = inner;
      };
      var name = genName();
      grammar.name(name).seq().rule(names[str]).ignore();
      return name;
    }
    if (node.type == "TokenString") {
      var str = node.items[0].as<Token>().value;
      names[str] orelse do {
        var name = genName();
        grammar.name(name).seq().str(str).token();
        if (!term) {
          grammar.mayLex();
        }
        names[str] = name;
      };
      return names[str];
    }
    console.log("unhandled: /${node.type}/ -> ${node.toString()}");
    bubble();
    return "";
  }

  let translate(tree: Tree): String {
    match (tree) {
      is Node -> return translateNode(tree.as<Node>());
      else -> do {
        console.log("unhandled: ${tree.toString()}");
        bubble();
        return "";
      };
    }
  }

  translate(whole);

  grammar.name("__start__").seq().rule("__ignores__").rule("start").rule("__ignores__").expand();
  grammar.name("__ignores__").seq().rule("__ignores__").rule("IGNORE").ignore();
  grammar.name("__ignores__").seq().ignore();

  grammar.name("RAW_ASCII").seq().char(ascii).token();
  grammar.name("RAW_NEWLINE").seq().char("\n").token();
  grammar.name("RAW_WHITESPACE").seq().char("\t\r\n ").token();
  grammar.name("RAW_STRING_BODY_BASE").seq().char(stringBodyBase).token();
  grammar.name("RAW_ALPHA_UNDER").seq().char("${alpha}_").token();
  grammar.name("RAW_ALNUM_UNDER").seq().char("${alnum}_").token();

  return grammar;
}

export class Grammar {
  private rname: String;
  private parts: ListBuilder<ListBuilder<RulePart>>;
  private rules: Rules;
  private nid: Int;
  private maxDot: Int;
  private cons: ListBuilder<String>;
  private lex: Rules;
  private nonLex: Rules;
  private mLex: ListBuilder<Boolean>;

  public constructor(): Void {
    rname = "";
    parts = new ListBuilder<ListBuilder<RulePart>>();
    rules = new Rules();
    nid = 0;
    maxDot = 0;
    lex = new Rules();
    nonLex = new Rules();
  }

  public lexer(): Lexer {
    var r = build();
    lex.build();
    return new Lexer(lex, r);
  }

  public charEarley(start: String): Earley {
    var rules = build();
    var found = if (start != "") {
      rules.byName[start]
    } else {
      rules.rules.toList()
    };
    var config = new EarleyConfig(nid, maxDot);
    var firstSet = new EarleyStateSet(config);
    for (var i = 0; i < found.length; i++) {
      firstSet.add(found[i].toItem(0));
    }
    return new CharEarley(start, rules.nullable, firstSet, rules.byName);
  }

  public lexerEarley(start: String): Earley {
    var rules = build();
    var found = if (start != "") {
      rules.byName[start]
    } else {
      rules.rules.toList()
    };
    var config = new EarleyConfig(nid, maxDot);
    var firstSet = new EarleyStateSet(config);
    for (var i = 0; i < found.length; i++) {
      firstSet.add(found[i].toItem(0));
    }
    lex.build();
    return new LexerEarley(start, rules.nullable, firstSet, rules.byName, new Lexer(lex, rules));
  }

  public name(s: String): Grammar {
    for (var i = 0; i < parts.length; i++) {
      var pparts = parts[i];
      if (pparts.length > maxDot) {
        maxDot = pparts.length;
      }
      var iparts = new ListBuilder<ItemPart>();
      for (var i = 0; i < pparts.length; i++) {
        if (pparts[i].isString) {
          iparts.add(new ItemPartSet(pparts[i].data.split("")));
        } else {
          iparts.add(new ItemPartItem(pparts[i].data));
        }
      }

      var rule = new Rule(rname, parts[i].toList(), nid++, iparts.toList(), cons[i], mLex[i]);
      
      if (mLex[i]) {
        lex.add(rule);
      }

      rules.add(rule);
    }
    cons = new ListBuilder<String>();
    mLex = new ListBuilder<Boolean>();
    rname = s;
    parts = new ListBuilder<ListBuilder<RulePart>>();
    return this;
  }

  public seq(): Grammar {
    parts.add(new ListBuilder<RulePart>());
    cons.add(rname);
    mLex.add(false);
    return this;
  }

  public ignore(): Grammar {
    cons[cons.length-1] = "%ignore";
    return this;
  }

  public expand(): Grammar {
    cons[cons.length-1] = "%expand";
    return this;
  }

  public mayLex(): Grammar {
    mLex[mLex.length-1] = true;
    return this;
  }

  public token(): Grammar {
    cons[cons.length-1] = "%token";
    return this;
  }

  public alias(aliasName: String): Grammar {
    cons[cons.length-1] = aliasName;
    return this;
  }

  public str(seq: String): Grammar {
    var split = seq.split("");
    for (var i = 0; i < split.length; i++) {
      parts[parts.length-1].add(new RulePart(true, split[i]));
    }
    return this;
  }

  public char(chr: String): Grammar {
    parts[parts.length-1].add(new RulePart(true, chr));
    return this;
  }

  public rule(xname: String): Grammar {
    parts[parts.length-1].add(new RulePart(false, xname));
    return this;
  }

  public build(): Rules {
    name("");
    var got = rules.build();
    for (var i = 0; i < got.length; i++) {
      console.log("undefined: ${got[i]}");
    }
    return rules;
  }

  public toString(): String {
    return build().toString();
  }
}
