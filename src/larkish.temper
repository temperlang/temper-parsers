
let {...} = import("./grammar");
let {...} = import("./tree");
let {...} = import("./ascii");

export let larkish(): Grammar {
  var ret = new Grammar();
  ret.name("Grammar")
    .seq().rule("Ignore").rule("Defines").rule("Ignore");
  ret.name("Defines")
    .seq().rule("Defines").rule("Ignore").rule("Define").expand()
    .seq().rule("Define").expand();
  ret.name("Define")
    .seq().rule("DefineName").rule("Ignore").rule("CharColon").rule("Ignore").rule("Pattern")
    .seq().rule("Name").rule("Ignore").rule("CharColon").rule("Ignore").rule("Pattern").rule("Ignore").rule("AliasArrow").rule("Ignore").rule("Name").alias("AliasDefine");
  ret.name("Pattern")
    .seq().rule("Select").expand();
  ret.name("Select")
    .seq().rule("SelectBody");
  ret.name("SelectBody")
    .seq().rule("SelectBody").rule("Ignore").rule("CharPipe").rule("Ignore").rule("Sequence").expand()
    .seq().rule("Sequence").expand();
  ret.name("Sequence")
    .seq().rule("SequenceBody");
  ret.name("SequenceBody")
    .seq().rule("SequenceBody").rule("Ignore").rule("Postfix").expand()
    .seq().rule("Postfix").expand();
  ret.name("Postfix")
    .seq().rule("Single").rule("Ignore").rule("CharPlus").alias("OneOrMore")
    .seq().rule("Single").rule("Ignore").rule("CharTimes").alias("ZeroOrMore")
    .seq().rule("Single").rule("Ignore").rule("CharQuestion").alias("ZeroOrOne")
    .seq().rule("Single").expand();
  ret.name("Single")
    .seq().rule("CharOpenParen").rule("CharCloseParen").expand()
    .seq().rule("CharOpenParen").rule("Ignore").rule("Pattern").rule("Ignore").rule("CharCloseParen").expand()
    .seq().rule("Name").alias("Rule")
    .seq().rule("CharQuotes").rule("StringBody").rule("CharQuotes").alias("String")
    .seq().rule("CharQuotes").rule("StringBody").rule("CharQuotes").rule("CharBang").alias("TokenString")
    .seq().rule("CharOpenSquare").rule("StringBody").rule("CharCloseSquare").alias("CharSet")
    .seq().rule("CharHashtag").char(ascii).alias("CharSet");
  ret.name("StringBody")
    .seq().rule("StringData").token();
  ret.name("StringData")
    .seq().rule("StringData").rule("StringChar").expand()
    .seq().char(stringBody).expand();
  ret.name("StringChar")
    .seq().char(stringBody)
    .seq().rule("CharBackslash").rule("StringEscape").expand();
  ret.name("StringEscape")
    .seq().char("\"'rtn")
    .seq().char("x").char(digits).char(digits);
  ret.name("DefineName")
    .seq().rule("Name").rule("Ignore").rule("CharQuestion").alias("ExpandName")
    .seq().rule("Name").alias("Name");
  ret.name("Name")
    .seq().rule("Letters").token();
  ret.name("Letters")
    .seq().rule("Letters").char("${alpha}_.").expand()
    .seq().char(alpha).expand();
  ret.name("Ignore")
    .seq().rule("IgnoreChars").ignore()
    .seq().ignore();
  ret.name("IgnoreChars")
    .seq().rule("IgnoreChars").char(" \t\r\n")
    .seq().char(" \t\r\n");
  ret.name("AliasArrow").seq().str("->").ignore();
  ret.name("CharCaret").seq().str("^").ignore();
  ret.name("CharQuotes").seq().char("\"").ignore();
  ret.name("CharColon").seq().char(":").ignore();
  ret.name("CharPipe").seq().char("|").ignore();
  ret.name("CharPlus").seq().char("+").ignore();
  ret.name("CharTimes").seq().char("*").ignore();
  ret.name("CharQuestion").seq().char("?").ignore();
  ret.name("CharBang").seq().char("!").ignore();
  ret.name("CharOpenParen").seq().char("(").ignore();
  ret.name("CharCloseParen").seq().char(")").ignore();
  ret.name("CharOpenSquare").seq().char("[").ignore();
  ret.name("CharCloseSquare").seq().char("]").ignore();
  ret.name("CharBackslash").seq().char(")").ignore();
  ret.name("CharHashtag").seq().char("#").ignore();
  return ret;
}
