

let {...} = import("./grammar");
let {...} = import("./larkish");
let {...} = import("./tree");

var larky = larkish();

export class Parser {
  private grammar: Grammar;

  public constructor(src: String): Void {
    var tree = larky.earley("Grammar").first(src);
    grammar = fromTree(tree);
  }

  public parse(str: String): Tree {
    return grammar.earley("__start__").first(str);
  }

  public trees(str: String): Listed<Tree> {
    return grammar.earley("__start__").trees(str);
  }

  public classify(str: String): Node | Null {
    var hashtagCodePoint = "#".codePoints.read();
    var trees = grammar.earley("").allTrees(str);
    var n = -1;
    var best : Node | Null = null;
    for (var i = 0; i < trees.length; i++) {
      var node = trees[i].as<Node>();
      if (node.type.codePoints.read() != hashtagCodePoint && node.items.length == 1) {
        var item = node.items[0];
        match (item) {
          is Node -> do {
            var inode = item.as<Node>();
            var s = inode.toString();
            if (n < 0 || s.codePoints.length < n) {
              n = s.codePoints.length;
              best = inode;
            }
          };
          else -> do {};
        }
    }
    }
    return best;
  }
}
