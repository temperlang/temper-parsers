
export interface Tree {
  public toString(): String;
}

export class Error extends Tree {
  public wanted: List<String>;
  public got: String;

  public toString(): String {
    return "(error: char: ${got})";
  }
}

export class Token extends Tree {
  public value: String;

  public toString(): String {
    return "\"${value}\"";
  }
}

export class Node extends Tree {
  public type: String;
  public items: Listed<Tree>;

  public forEach(cb: fn(Tree): Void): Void {
    for (var i = 0; i < items.length; i++) {
      cb(items[i]);
    }
  }

  public toString(): String {
    var strs = new ListBuilder<String>();
    strs.add(type);
    for (var item = 0; item < items.length; item++) {
      strs.add(items[item].toString());
    }
    var joined = strs.join(" ") { (s);; s };
    return "(${joined})";
  }
}

export let format(base: Tree): String {
  var builder = new ListBuilder<String>();
  var depth = 0;
  var tab = "  ";

  let line(): Int {
    if (builder.length != 0) {
      builder.add("\n");
    }
    var len = 0;
    for (var i = 0; i < depth; i++) {
      builder.add(tab);
      len += tab.codePoints.length;
    }
    return len;
  }

  let more(tree: Tree): Void {
    match (tree) {
      is Node -> do {
        var node = tree.as<Node>();
        var str = node.toString();
        var n = line();
        if (str.codePoints.length + n < 80 && depth != 0) {
          builder.add(str);
        } else {
          builder.add("(${node.type}");
          depth += 1;
          for (var i = 0; i < node.items.length; i++) {
            more(node.items[i]);
          }
          depth -= 1;
          builder.add(")");
        }
      };
      is Token -> do {
        var token = tree.as<Token>();
        line();
        builder.add("\"${token.value}\"");
      };
    }
  }

  more(base);

  return builder.join("") { (s);; s };
}
