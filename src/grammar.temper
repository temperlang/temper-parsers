
let {...} = import("./earley");
let {...} = import("./tree");
let {...} = import("./ascii");

export let grammar(whole: Tree): Earley {
  var earley = new Earley();

  var base = "";
  var term: Boolean = false;
  var n = 0;
  let genName(): String {
    n += 1;
    return "${base}#${n.toString()}";
  }

  let translateNode(node: Node, cb: fn(String): Void): Void {
    if (node.type == "Grammar") {
      node.forEach { (tree);;
        translate(tree) { (name);; };
      };
      cb("");
      return;
    }
    if (node.type == "AliasDefine") {
      var alias = node.items[2].as<Token>().value;
      var name = node.items[0].as<Token>().value;
      term = name.codePoints.read() <= "Z".codePoints.read();
      translate(node.items[1]) { (item);;
        earley.name(name).seq().rule(item);
        if (term) {
          earley.token();
        } else {
          earley.alias(alias);
        }
        cb("");
      };
      return;
    }
    if (node.type == "Define") {
      var name = node.items[0].as<Node>();
      var base = name.items[0].as<Token>().value;
      var expand = name.type == "ExpandName";
      term = base.codePoints.read() <= "Z".codePoints.read();
      translate(node.items[1]) { (item);;
        earley.name(base).seq().rule(item);
        if (expand) {
          earley.expand();
        }
        if (term) {
          earley.token();
        }
        cb("");
      };
      return;
    }
    if (node.type == "Rule") {
      var name = node.items[0].as<Token>().value;
      cb(name);
      return;
    }
    if (node.type == "Select") {
      var name = genName();
      var names = new ListBuilder<String>();
      node.forEach { (tree);;
        translate(tree) { (item);;
          names.add(item);
          if (names.length == node.items.length) {
            earley.name(name);
            for (var i = 0; i < names.length; i++) {
              earley.seq().rule(names[i]).expand();
            }
            cb(name);
          }
        };
      };
      return;
    }
    if (node.type == "Sequence") {
      var name = genName();
      var names = new ListBuilder<String>();
      node.forEach { (tree);;
        translate(tree) { (item);;
          names.add(item);
          if (names.length == node.items.length) {
            earley.name(name).seq();
            for (var i = 0; i < names.length; i++) {
              if (i != 0) {
                if (!term) {
                  earley.rule("__ignores__");
                }
              }
              earley.rule(names[i]);
            }
            earley.expand();
            cb(name);
          }
        };
      };
      return;
    }
    if (node.type == "OneOrMore") {
      var name = genName();
      translate(node.items[0]) { (item);;
        earley.name(name);
        if (!term) {
          earley.seq().rule(name).rule("__ignores__").rule(item).expand();
        } else {
          earley.seq().rule(name).rule(item).expand();
        }
        earley.seq().rule(item).expand();
        cb(name);
      };
      return;
    }
    if (node.type == "ZeroOrMore") {
      var name = genName();
      translate(node.items[0]) { (item);;
        earley.name(name);
        if (!term) {
          earley.seq().rule(name).rule("__ignores__").rule(item).expand();
        } else {
          earley.seq().rule(name).rule(item).expand();
        }
        earley.seq().expand();
        cb(name);
      };
      return;
    }
    if (node.type == "ZeroOrOne") {
      var name = genName();
      translate(node.items[0]) { (item);;
        earley.name(name);
        earley.seq().rule(item).expand();
        earley.seq().expand();
        cb(name);
      };
      return;
    }
    if (node.type == "CharSet") {
      var name = genName();
      earley.name(name).seq().char(node.items[0].as<Token>().value).token();
      cb(name);
      return;
    }
    if (node.type == "String") {
      var name = genName();
      earley.name(name).seq().str(node.items[0].as<Token>().value).ignore();
      cb(name);
      return;
    }
    if (node.type == "TokenString") {
      var name = genName();
      earley.name(name).seq().str(node.items[0].as<Token>().value).token();
      cb(name);
      return;
    }
    console.log("unhandled: /${node.type}/ -> ${node.toString()}");
    bubble();
  }

  let translate(tree: Tree, cb: fn(String): Void): Void {
    match (tree) {
      is Node -> translateNode(tree.as<Node>(), cb);
      else -> do {
        console.log("unhandled: ${tree.toString()}");
      };
    }
  }

  translate(whole) { (s);; };

  earley.name("__start__").seq().rule("__ignores__").rule("start").rule("__ignores__").expand();
  earley.name("__ignores__").seq().rule("__ignores__").rule("ignore").ignore();
  earley.name("__ignores__").seq().ignore();

  earley.name("RAW_ASCII").seq().char(ascii).token();
  earley.name("RAW_WHITESPACE").seq().char("\t\r\n ").token();
  earley.name("RAW_STRING_BODY_BASE").seq().char(stringBodyBase).token();
  earley.name("RAW_ALPHA_UNDER").seq().char("${alpha}_").token();
  earley.name("RAW_ALNUM_UNDER").seq().char("${alnum}_").token();

  return earley;
}

