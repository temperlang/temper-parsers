
let {...} = import("./tree.temper");
let {...} = import("./items.temper");

export class RulePart {
  public isString: Boolean;
  public data: String;

  public toString(): String {
    if (isString) {
      return "\"${data}\"";
    } else {
      return data;
    }
  }
}

export class Rule {
  public name: String;
  public parts: List<RulePart>;
  public id: Int;
  public iparts: List<ItemPart>;

  public toString(): String {
    var build = new ListBuilder<String>();
    build.add(name);
    build.add("->");
    for (var i = 0; i < parts.length; i++) {
      build.add(parts[i].toString());
    }
    return build.join(" ") { (s);; s };
  }

  public toItem(at: Int): Item {
    return new Item(name, iparts, 0, at, id, [], []);
  }
}

export class Rules {
  public nullable: DenseBitVector;
  public rules: ListBuilder<Rule>;
  public byName: Mapped<String, Listed<Rule>>;
  private var built: Boolean;

  public constructor(): Void {
    nullable = new DenseBitVector(0);
    rules = new ListBuilder<Rule>();
    built = true;
  }

  public build(): List<String> {
    var byNameBuilder = new MapBuilder<String, ListBuilder<Rule>>();
    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var ls = byNameBuilder.getOr(rule.name, new ListBuilder<Rule>());
      ls.add(rule);
      byNameBuilder[rule.name] = ls;
    }
    byName = byNameBuilder;
    var isNull = new MapBuilder<String, Boolean>();
    for (var i = 0; i < rules.length; i++) {
      isNull[rules[i].name] = false;
    }
    for (var i = 0; i < rules.length; i++) {
      isNull[rules[i].name] = isNull[rules[i].name] || rules[i].parts.length == 0;
    }
    nullable = new DenseBitVector(rules.length);
    for (var i = 0; i < rules.length; i++) {
      var rule = rules[i];
      var cur = true;
      for (var j = 0; j < rule.parts.length; j++) {
        var part = rule.parts[j];
        if (part.isString) {
          cur = false;
        } else {
          if (!isNull[part.data]) {
            cur = false;
          }
        }
      }
      nullable[rule.id] = cur;
    }
    var unk = new ListBuilder<String>();
    built = true;
    return unk.toList();
  }

  public add(rule: Rule): Void {
    built = false;
    rules.add(rule);
  }

  public toString(): String {
    return rules.join("\n", fn(rule: Rule): String {
      return rule.toString();
    });
  }
}