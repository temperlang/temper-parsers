
start?: program

program: stmt* (stmt | expr)?

block_body: stmt* (stmt | expr)?

stmt: var_decl | func_decl | expr_stmt | func_def | for_stmt | while_stmt | if_stmt | class_def | interface_def | match_stmt

var_decl?: var_decl_no_semi ";"
expr_stmt: expr ";"

do_stmt?: do_expr
if_stmt?: if_expr

for_stmt: "for" "(" (var_decl_no_semi | expr) ";" expr_opt ";" expr_opt ")" "{" block_body "}"

expr_opt: ()
expr_opt?: expr

while_stmt: "while" "(" expr ")" "{" block_body "}"

match_stmt: "match" "(" expr ")" "{" match_cases "}"
match_cases: match_case+
match_case: "is" type "->" stmt -> match_on_type
match_case: expr "->" stmt -> match_on_value

var_decl_class: var_class -> var_class
var_decl_no_semi: var_decl_class ident -> var_decl
var_decl_no_semi: var_decl_class ident ":" type -> typed_var_decl
var_decl_no_semi: var_decl_class (ident | destructure | destructure_ellipsis) "=" expr? -> var_def
var_decl_no_semi: var_decl_class ident ":" type "=" expr? -> typed_var_def
var_decl_no_semi: var_decl_class ident "=" type? -> type_alias

destructure: "{" (ident ",")* ident? "}"
destructure_ellipsis: "{" "..." "}"

class_def: class_class? "class" ident type_params? type_extends? "{" block_body "}"
interface_def: class_class? "interface" ident type_params? type_extends? "{" block_body "}"

func_decl_class: var_class -> func_class
func_decl: func_decl_class ident type_params? func_type ";"
func_decl: func_decl_class "get" ident type_params? func_type ";" -> get_decl
func_decl: func_decl_class "set" ident type_params? func_type ";" -> set_decl
func_def: func_decl_class ident type_params? func_type "{" block_body "}"
func_def: func_decl_class "get" ident type_params? func_type "{" block_body "}" -> get_def
func_def: func_decl_class "set" ident type_params? func_type "{" block_body "}"  -> set_def

class_class: class_class
var_class: var_class

class_class: "export" -> export
class_class: "public" -> public
class_class: "private" -> private

func_class: "static" "private" "var" -> public_static_var
func_class: "static" "public" "var" -> private_static_var
func_class: "static" "private" "let" -> public_static_let
func_class: "static" "public" "let" -> private_static_let
func_class: "static" "private" "const" -> public_static_const
func_class: "static" "public" "const" -> private_static_const
func_class: "private"? "static" "var" -> private_static_var
func_class: "public" "static" "var" -> public_static_var
func_class: "private"? "static" "let" -> private_static_let
func_class: "public" "static" "let" -> public_static_let
func_class: "private"? "static" "const" -> private_static_const
func_class: "public" "static" "const" -> public_static_const
func_class?: var_class

var_class: "private" -> private
var_class: "public" -> public
var_class: "var" -> var
var_class: "let" -> let
var_class: "const" -> const
var_class: "private" "var" -> private_var
var_class: "public" "var" -> public_var
var_class: "export" "var" -> export_var
var_class: "private" "let" -> private_let
var_class: "public" "let" -> public_let
var_class: "export" "let" -> export_let
var_class: "private" "const" -> private_const
var_class: "public" "const" -> public_const
var_class: "export" "const" -> export_const

expr?: assign

assign: postfix "." ident "=" assign -> set_prop
assign: postfix "[" expr "]" "=" assign -> set_index
assign: ident ("+="! | "*="! | "/="! | "-="! | "%="!) assign -> set_mut_var
assign: ident "=" assign -> set_var
assign?: orelse

orelse: logic "orelse" orelse
orelse?: logic

logic: logic "&&" cmp -> boolean_and
logic: logic "||" cmp -> boolean_or
logic?: cmp

cmp: cmp "!=" add -> is_equal_to
cmp: cmp "==" add -> is_not_equal_to
cmp: cmp "<" add -> is_less_than
cmp: cmp ">" add -> is_greater_than
cmp: cmp "<=" add -> is_less_than_or_equal_to
cmp: cmp ">=" add -> is_greater_than_or_equal_to
cmp?: add

add: add "+" mul -> add
add: add "-" mul -> subtract
add?: mul

mul: mul "*" pow -> multiply
mul: mul "/" pow -> divide
mul: mul "%" pow -> modulo
mul?: pow

pow: prefix "**" pow
pow?: prefix

prefix: "-" postfix -> negate
prefix: "++" postfix -> pre_inc
prefix: "--" postfix -> pre_dec
prefix: "!" postfix -> not
prefix: "return" expr? -> return
prefix?: "+" postfix
prefix?: postfix

postfix: postfix "++" -> post_inc
postfix: postfix "--" -> post_dec
postfix: postfix "[" expr "]" -> index
postfix: postfix "." ident -> prop
postfix: postfix "." "as" "<" type ">" "(" ")" -> cast
postfix: postfix "(" (expr ",")* expr? ")" block_arg? -> call
postfix: postfix block_arg -> call
postfix: "new" type "(" (expr ",")* expr? ")" -> new
postfix?: single

block_arg: "{" (func_type ";;") block_body "}"

single?: ident | fn_expr | if_expr | do_expr | string | int | float | array | "(" expr ")"

do_expr: "do" "{" block_body "}"
if_expr: "if" "(" expr ")" "{" block_body "}" else_if* else?
else_if: "else" "if" "(" expr ")" "{" block_body "}"
else: "else" "{" block_body "}"

fn_expr: "fn" fn_expr_type "{" block_body "}"
fn_expr_type: "(" (maybe_typed_param ",")* maybe_typed_param? ")" return_type?

string: #' ("${" expr "}" | STRING_BODY )* #'
string: #" ("${" expr "}" | STRING_BODY )* #"

array: "[" (expr ",")* expr? "]"

func_type: "(" (maybe_typed_param ",")* maybe_typed_param? ")" return_type?

maybe_typed_param: ident ":" type -> typed_param
maybe_typed_param: ident -> non_typed_param

type_params: "<" (type_param ",")* type_param? ">"
type_param: (CONTRAVARIANT | COVARIANT)? type_param_name type_extends?
type_param_name: ident
type_extends: "extends" type

type: type "|" "Null" -> nullable_type
type: ident -> nominal_type
type: "fn" "(" (type ",")* type? ")" return_type -> function_type
type: ident "<" (type ",")* type? ">" -> generic_type

return_type: ":" type -> return_type
return_type: ":" type "|" "Bubble" -> return_type_or_bubble

int: INT

float: FLOAT

ident: NAME

STRING_BODY: (RAW_STRING_BODY_BASE | ESCAPE)*

NAME: RAW_ALPHA_UNDER RAW_ALNUM_UNDER*

ESCAPE: #\ ([rtn $'] | #0 | #" | #\)
FLOAT: INT "."! [0123456789]*
INT: "0"! | [123456789] [0123456789]*

COVARIANT: "out"
CONTRAVARIANT: "in"

ignore: RAW_WHITESPACE+
ignore: "//" RAW_ASCII*
